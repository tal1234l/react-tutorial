var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      type:'GET',
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function (comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function () {
    // executes once during the life cycle of the component and sets up the initial state of the component
    // if the state of the component is changed, the component will re render.
    return {data: []};
  },
  componentDidMount: function() {
    // this function is called automatically by react after a component is renderd for the first time.
    // the key to dynamic updates is the call to this.setState()
    this.loadCommentsFromServer();
    //we pull data form the server after the first render and each "pullInterval" time
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return(
      <div className="commentBox">
        <h1>Comments:</h1>
        <CommentList data={this.state.data}/>
        <CommentForm onCommentSubmit={this.handleCommentSubmit}/>
      </div>
    );
  }
});
var CommentList = React.createClass({
  render: function () {
    var commentNodes = this.props.data.map(function(comment) {
      return  (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});
var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },
  render: function () {
    return  (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});
var CommentForm = React.createClass({
  getInitialState: function () {
    return {author: '', textInput: ''};
  },
  handleAuthorChange: function (e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function (e) {
    this.setState({textInput: e.target.value});
  },
  handleSubmit: function (e) {
    debugger;
    e.preventDeafult;
    var author = this.state.author.trim();
    var text = this.state.textInput.trim();
    if (!author || !text) {
      return;
    }
    //todo: send request to server
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function () {
    return (
      <div className="commentFrom">
        <form className="commentForm" onSubmit={this.handleSubmit}>
          <input
            type="text"
            placeholder="Your name."
            value={this.state.author}
            onChange={this.handleAuthorChange}
          />
          <input
            type="text"
            placeholder="Say something"
            value={this.state.textInput}
            onChange={this.handleTextChange}
          />
          <input type="button" onClick={this.handleSubmit} value='post'/>
        </form>
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('commentBox')
);
